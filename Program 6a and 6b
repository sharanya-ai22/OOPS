program 6A

class WrongAge(Exception):
    pass

class AgeInvalid(Exception):
    pass


class Father:
    def __init__(self, age):
        if age < 0:
            raise WrongAge("Age cannot be negative")
        self.father_age = age


class Son(Father):
    def __init__(self, father_age, son_age):
        super().__init__(father_age) 

        if son_age >= father_age:
            raise AgeInvalid("Son's age should be less than Father's age")

        self.son_age = son_age


try:
    father_age_input = int(input("Enter Father's age: "))
    son_age_input = int(input("Enter Son's age: "))

    father = Father(father_age_input)
    son = Son(father_age_input, son_age_input)

    print("Father's age:", father.father_age)
    print("Son's age:", son.son_age)

except WrongAge as e:
    print(f"Error: {e}")
except AgeInvalid as e:
    print(f"Error: {e}")
except ValueError:
    print("Invalid input. Please enter a valid age.")





program  6B

class FormulaError(Exception):
    pass

def calculate(formula):
    try:
       
        elements = formula.split()

     
        if len(elements) != 3:
            raise FormulaError("Invalid formula. Please provide a formula with 3 elements.")

  
        operand1 = float(elements[0])
        operand2 = float(elements[2])

    
        operator = elements[1]
        if operator not in ('+', '-'):
            raise FormulaError("Invalid operator. Please use + or -.")

       
        result = operand1 + operand2 if operator == '+' else operand1 - operand2

       
        print("Result:", result)

    except ValueError:
        raise FormulaError("Invalid input. Please provide valid numeric values.")


while True:
    user_input = input("Enter a formula (or 'quit' to exit): ")

    if user_input.lower() == 'quit':
        break

    try:
        calculate(user_input)

    except FormulaError as e:
        print(f"Error: {e}")
