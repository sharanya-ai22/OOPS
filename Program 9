import threading
import time
import queue
import random

market_capacity = 5
market_queue = queue.Queue(market_capacity)
vegetables = ["Tomato", "Carrot", "Cabbage", "Broccoli", "Spinach"]
farmers = []


queue_lock = threading.Lock()
print_lock = threading.Lock()

def farmer_produce(vegetable):
    while True:
        time.sleep(random.randint(1, 3))
        with queue_lock:
            if market_queue.qsize() < market_capacity:
                market_queue.put(vegetable)
                with print_lock:
                    print(f"Farmer produced {vegetable}. Market Queue: {list(market_queue.queue)}")

def consumer_purchase():
    while True:
        time.sleep(random.randint(1, 4))
        with queue_lock:
            if not market_queue.empty():
                vegetable = market_queue.get()
                with print_lock:
                    print(f"Consumer bought {vegetable}. Market Queue: {list(market_queue.queue)}")

def main():
    
    for veg in vegetables:
        farmer_thread = threading.Thread(target=farmer_produce, args=(veg,))
        farmer_thread.start()
        farmers.append(farmer_thread)

    consumer_thread = threading.Thread(target=consumer_purchase)
    consumer_thread.start()

    
    for farmer_thread in farmers:
        farmer_thread.join()
    consumer_thread.join()

if __name__ == "__main__":
    main()
